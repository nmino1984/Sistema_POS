Video 3...
Para Organizar mejor la Configuration generada por el Scaffolding. Se trata usar el EntityTypeConfiguration.
* Se lleva el Context (POSContext) a la Capa de Infrastructure, a la Carpeta Persistences -> Contents
* Se crea una Carpeta llamada Configuration dentro de la Carpeta Contents.
* Se traslada cada una de las Clases que estan en Entties para la carpeta creada.
* Cada una de las clases creadas van a "heredar" de la Interfaz IEntityTypeConfiguration<NombreDeLaClase>
* Por cada una de las clases se debe instanciar (Implementar) el método Configure de la Interfaz, el cual sería lo que está en el método OnModelCreating de las clases que estamos trasladando

/*/*/*/*/**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
* Luego de crear todas las clases, debemos "Volver a Implementar" el método OnModelCreating, que se encuentra en POSContext, agregándole las líneas:
- modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");
- modelBuilder.ApplyConfigurationsFromAssembly/Assembly.GetExecutingAssemble());

*Además, debemos eliminar por completo el método que contiene la Cadena de Conexión.

Tener en cuenta "Limpiar" las referencias no usadas para dejar más limpio el código

/*/*/*/*/*/*/*/*/*/*/*/*/*/**/*/*/*/*/*/*/*/*/*/*/*/
* Ahora pasamos a crear una Clase con la que realizaremos la Conexión, ya que fue borrada anteriormente.
Para esto creamos una clase InjectionExtensions, en la Capa Infrastructure, con el siguiente método:

public static IServiceCollection AddInjectionInfrastructure(this IServiceCollection services, IConfiguration configuration)
        {
            var assembly = typeof(POSContext).Assembly.FullName;

            services.AddDbContext<POSContext>(
                options => options.UseSqlServer(
                    configuration.GetConnectionString("POSConnectionString"), b => b.MigrationsAssembly(assembly)), ServiceLifetime.Transient);

            return services;
        }